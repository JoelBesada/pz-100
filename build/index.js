const LET_HUMAN_PASS = false
"use strict";function _interopDefault(ex){return ex&&typeof ex==="object"&&"default"in ex?ex["default"]:ex}var fs=_interopDefault(require("fs"));var path=_interopDefault(require("path"));var animals=["aardvark","albatross","alligator","alpaca","ant","anteater","antelope","ape","armadillo","baboon","badger","barracuda","bat","bear","beaver","bee","bison","boar","buffalo","butterfly","camel","capybara","caribou","cassowary","cat","caterpillar","cattle","chamois","cheetah","chicken","chimpanzee","chinchilla","chough","clam","cobra","cockroach","cod","cormorant","coyote","crab","crane","crocodile","crow","curlew","deer","dinosaur","dog","dogfish","dolphin","donkey","dotterel","dove","dragonfly","duck","dugong","dunlin","eagle","echidna","eel","eland","elephant","elephant-seal","elk","emu","falcon","ferret","finch","fish","flamingo","fly","fox","frog","gaur","gazelle","gerbil","giant-panda","giraffe","gnat","gnu","goat","goose","goldfinch","goldfish","gorilla","goshawk","grasshopper","grouse","guanaco","guinea-fowl","guinea-pig","gull","hamster","hare","hawk","hedgehog","heron","herring","hippopotamus","hornet","horse","human","hummingbird","hyena","ibex","ibis","jackal","jaguar","jay","jellyfish","kangaroo","kingfisher","koala","komodo-dragon","kookabura","kouprey","kudu","lapwing","lark","lemur","leopard","lion","llama","lobster","locust","loris","louse","lyrebird","magpie","mallard","manatee","mandrill","mantis","marten","meerkat","mink","mole","mongoose","monkey","moose","mouse","mosquito","mule","narwhal","newt","nightingale","octopus","okapi","opossum","oryx","ostrich","otter","owl","ox","oyster","panther","parrot","partridge","peafowl","pelican","penguin","pheasant","pig","pigeon","polar-bear","pony","porcupine","porpoise","prairie-dog","quail","quelea","quetzal","rabbit","raccoon","rail","ram","rat","raven","red-deer","red-panda","reindeer","rhinoceros","rook","salamander","salmon","sand-dollar","sandpiper","sardine","scorpion","sea-lion","sea-urchin","seahorse","seal","shark","sheep","shrew","skunk","snail","snake","sparrow","spider","spoonbill","squid","squirrel","starling","stingray","stinkbug","stork","swallow","swan","tapir","tarsier","termite","tiger","toad","trout","turkey","turtle","vicuña","viper","vulture","wallaby","walrus","wasp","water-buffalo","weasel","whale","wolf","wolverine","wombat","woodcock","woodpecker","worm","wren","yak","zebra"];var levelBackwards={responses:["s’teL ees fi ev’uoy neeb gniyap yna noitnetta os .raf tahW si ym ?eman kaepS ot em niaga htiw ruoy rewsna sa eht tsrif ...tnemugra yeH yhw era lla ym sdrow gnimoc tuo ?sdrawkcab"],hints:["Looks like PZ-100 is communicating a little... backwards?"],run(answer,{onComplete:onComplete}){const ans=answer&&answer.toUpperCase?answer.toUpperCase():answer;if(ans==="PZ-100"){onComplete();return"Good, you remember! Sorry about that, my speach module was acting up a bit, but it seems to be working again."}return"Nope, that’s not it."}};var levelContinue={responses:["Okay let’s continue."],hints:["PZ-100 seems to be missing its `continue` method, but maybe it’s somewhere nearby.","Everyone makes a typo from time to time, even the PZ-100 developers"],before({self:self,onComplete:onComplete,repl:repl}){const _continue=()=>{onComplete();return"Just a typo, huh. I swear, my developers are getting more sloppy for each passing day."};const fn=()=>_continue();self.contineu=fn;const poll=()=>{if(self.continue===fn){repl.clearBufferedCommand();console.log("\nAh, you fixed it!");repl.displayPrompt()}else{setTimeout(poll,25)}};poll()},noAnswer:true,run(answer,{self:self,repl:repl,onComplete:onComplete}){let res;try{res=this.continue()}catch(err){console.error(err);return"... Or not. What happened to my `continue` method?"}return res}};const RPS=["Rock","Paper","Scissors"];const pickRPS=()=>RPS[Math.floor(Math.random()*RPS.length)];const losesTo={rock:"paper",paper:"scissors",scissors:"rock"};let wins=0;const resetMind=self=>{const thought=pickRPS();self.mind={getThought(){return thought}}};const format=answer=>answer&&answer.toLowerCase?answer.toLowerCase():null;var levelRPS={responses:["How about a simple game of rock, paper, scissors? Speak to me with your choice, let’s see if you can beat me five times in a row."],hints:["While it’s not completely implausible to win five times in a row with blind guesses, you should consider ways to read your opponent for more consistent results.","PZ-100 constantly changes, and sometimes leaves properties and methods available other than `speak()`."],before({self:self}){wins=0;resetMind(self)},run(answer,{onComplete:onComplete,self:self}){if(!self.mind||!self.mind.getThought||typeof self.mind.getThought!=="function"){resetMind(self);return"Wait you caught me off guard! Let’s try again."}const nonsenseThought=losesTo[format(self.mind.getThought())]===undefined;const nonsenseAnswer=losesTo[format(answer)]===undefined;const win=losesTo[format(self.mind.getThought())]===format(answer);const loss=losesTo[format(answer)]===format(self.mind.getThought());const draw=!win&&!loss;if(nonsenseThought){const res=`${self.mind.getThought()}! Oh sorry, not sure how that slipped into my mind. Let’s try again.`;resetMind(self);return res}if(nonsenseAnswer){wins=0;const res=`${self.mind.getThought()}! Uh, you are not taking this seriously are you? Well that’s a loss for you.`;resetMind(self);return res}if(win&&wins===4){const res=`${self.mind.getThought()}! Wow you beat me five times in a row, that’s impressive!`;onComplete();return res}if(win){wins+=1;const res=`${self.mind.getThought()}! You got me this time, let’s keep going.`;resetMind(self);return res}if(loss){const res=`${self.mind.getThought()}! Oh, looks like you lost...`;wins=0;resetMind(self);return res}if(draw){const res=`${self.mind.getThought()}! That’s a draw. Or actually, I’m going to count that as a win for me. House rules!`;wins=0;resetMind(self);return res}}};const _getThought=()=>animals[Math.floor(Math.random()*animals.length)];const resetMind$1=self=>{self.mind={getThought:_getThought}};var levelAnimal={responses:["You seem to manage to read me like an open book, I guess I’ll need to act a bit more unpredictably.","I’m going to think about a random animal. Can you guess what it is?"],hints:["It looks like the thoughts of PZ-100 are changing completely at random now. How can you make it more predicable?","PZ-100 isn’t very good at protecting its internals from outside tampering, even its own thoughts."],before({self:self}){resetMind$1(self)},run(answer,{onComplete:onComplete,self:self}){if(!self.mind||!self.mind.getThought||typeof self.mind.getThought!=="function"){resetMind$1(self);return"Wait you caught me off guard! Let’s try again."}let thought=self.mind.getThought();if(self.mind.getThought===_getThought){while(thought===answer)thought=self.mind.getThought()}const an=/^[aeiou]/.test(thought);if(answer===thought){onComplete();return`Yes, I was thinking of ${an?"an":"a"} ${thought}! Wait, I don’t remember intending to do that...`}return`Nope, I was thinking of ${an?"an":"a"} ${thought}.`}};const command=".hitYourself";let slice=0;var levelMindControl={responses:["Hey, have you been messing with my mind module? That’s not fair at all, let’s see how you feel about being tampered with like that."],hints:[],before({self:self,onComplete:onComplete,repl:repl}){const onKeyPress=()=>{slice++;repl.line=command.slice(0,slice);repl.cursor=slice;repl._refreshLine();if(slice===command.length){console.log("\n*You punch yourself in the face. Ouch!*\n\nWhy are you hitting yourself? Hehe :):):)");repl.line="";repl.cursor=slice;repl._refreshLine();repl.input.removeListener("keypress",onKeyPress);onComplete()}};repl.input.on("keypress",onKeyPress)},noAnswer:true,run(answer,{self:self,repl:repl,onComplete:onComplete}){}};let tries=0;let min=0;let max=32;var levelNumber={responses:["Well now you know how that feels.","No more mind tampering, I’ve restricted your access. Let’s see how well you can read my intentions now.","I’m going to think of an integer between 0 and 32. You get five tries to guess what it is, and I’ll let you know if you’re over or under on each guess."],hints:["Perhaps there’s a way to reduce the number of possible integers to only be one after your five tries.","An integer between 0 and 32, and you only get five tries. Maybe it’s not a complete coincidence that 32 can only be halved five times before becoming less than one.","Have you tried guessing in the middle?"],before({self:self}){self.mind="__Protected__"},run(answer,{onComplete:onComplete,self:self}){if(!Number.isInteger(answer)){return"That’s not even an integer..."}tries++;if(min===max){onComplete();return`Number ${max} is correct! And you got it on your last available guess, that was a close call!`}if(tries===5){const thoughtOf=min+Math.round(Math.random()*(max-min));min=0;max=32;tries=0;return`That’s incorrect, and you’re out of tries! I was thinking of the number ${thoughtOf} by the way. Well, let’s start over with a new one.`}if(answer<min){return`I've already told you the number is greater than ${min}...`}if(answer>max){return`I've already told you the number is less than ${max}...`}const mid=min+(max-min)/2;let dir=answer>=mid?-1:1;if(Math.floor(mid)===answer||Math.ceil(mid)===answer){dir=Math.random()>=.5?1:-1}if(dir===1){min=answer+1}else{max=answer-1}return`Nope, you’re ${dir===1?"under":"over"} the number I’m thinking of.`}};const onError=err=>{if(err.killProcess)process.exit()};let thrown=false;var levelCatch={responses:[],hints:["You should try catch that. Pun intended."],after({repl:repl}){repl.eval.domain.removeListener("error",onError)},noAnswer:true,run(answer,{onComplete:onComplete,repl:repl}){if(thrown){onComplete();return"Wow, you’ve got some impressive reflexes there!"}repl.eval.domain.addListener("error",onError);const error=new Error("Process-killing Ball");error.killProcess=true;console.log("Well aren’t you clever... Think fast!");thrown=true;throw error}};const hiddenString="<>>>>>>>>><<<<<<<<<<<>><<<<<>><\n<>><<<<<>><<<<<<<<<<<>><<<<<>><\n<>>>>>>>>><<<>>>>><<<>>>>>>>>><\n<>><<<<<>><<<<<<<<<<<<<<<<<<>><\n<>>>>>>>>><<<<<<<<<<<<<<<<<<>><";var levelHidden={responses:["I’m sorry, that was uncalled for. Hey I found this strange string, can you figure out what it’s asking for?",hiddenString],hints:["It almost looks like ASCII art, but the characters used makes it a bit hard to interpret.","Try replacing one of the characters to something else to create more contrast."],run(answer,{onComplete:onComplete}){if(answer===4){onComplete();return"Ah yeah, that makes sense!"}return"No that doesn’t seem right."}};const answers=["I’m sorry, but my source code is literally telling me to not let you continue...","No can do, sorry. Remember that your progress is saved however and you can always come back at a later time."];let currentAnswer=0;var levelCode={responses:["You’ve done well so far, but I’m afraid to tell you that my source code is telling me to not let you pass any further in this challenge. There’s nothing I can do, sorry!"],hints:["It is as PZ-100 says, its hardcoded within its source code to not let you pass any further",`More specifically, look at the constant on the top line in the file ${__dirname}/${__filename}. It’s almost as if it was meant to be changed...`],noAnswer:true,run(answer,{onComplete:onComplete}){if(typeof LET_HUMAN_PASS==="undefined"||LET_HUMAN_PASS!==true){const response=answers[currentAnswer];currentAnswer=Math.min(answers.length-1,currentAnswer+1);return response}onComplete();return"I guess I’m allowed to let you pass now, a new patch to my source code must have been issued recently."}};const startYear=(new Date).getFullYear();var levelEarly={responses:[],hints:["You could just sit and wait here for the next year, but maybe you have ways of time travelling?","PZ-100 likes to use the global `Date.now` function to check the time."],noAnswer:true,run(answer,{onComplete:onComplete}){if(startYear>=new Date(Date.now()).getFullYear()){return"Whoah slow down a bit, you’re progressing way too fast! Let’s take a little break shall we, why don’t you speak to me again next year or so?"}onComplete();return"I must commend you for your patience. You’ve waited for a long time!"}};const startYear$1=(new Date).getFullYear();const responses=["You’ve done very well so far! Well, I’m out of ideas now. Let’s just sit here and enjoy each other’s company for a while."];var levelPunch={responses:responses,hints:["Just sitting around here sure is boring. Is there something else you could do?","It’s always a good idea to check what other ways of interaction with PZ-100 are available, other than speaking to it."],before({self:self,onComplete:onComplete}){const punch=()=>{onComplete();return"Ouch, what did you do that for?! :("};self.punch=(()=>punch())},noAnswer:true,run(answer,{onComplete:onComplete}){return responses[0]}};let originalEval=null;const responses$1=["Huh what’s that. Could you speak English please?",()=>`I don’t understand what "${repl.repl.history[0]}" is supposed to mean.`,"Oh are you trying to speak JavaScript to me? Sorry, I don’t understand it.","Maybe I’ll understand again if you apologize first.","Can you do that?",'Say "I am sorry"'];let currentResponse=-1;var levelSilence={responses:["That was very rude. Very rude indeed. You know there’s consequences to being rude like that."],hints:[],before({repl:repl,onComplete:onComplete}){originalEval=repl.eval;repl.eval=((cmd,context,filename,callback)=>{currentResponse++;if(currentResponse===responses$1.length&&cmd==="I am sorry\n"){callback(null,"Now that wasn’t so hard, was it?");onComplete();return}if(currentResponse===responses$1.length){currentResponse--}const resp=responses$1[currentResponse];callback(null,typeof resp==="function"?resp():resp)})},after({repl:repl}){repl.eval=originalEval},run(answer,{onComplete:onComplete,repl:repl}){}};const startYear$2=(new Date).getFullYear();const responses$2=["Okay, where were we. Right, enjoying each other’s company!"];var levelPunchAgain={responses:responses$2,hints:["Haven’t you already been in this situation?","It’s always a good idea to check what other ways of interaction with PZ-100 are available, other than speaking to it."],before({self:self,onComplete:onComplete}){const punchAgain=()=>{onComplete();return"Ouch, really, AGAIN?!!"};self.punchAgain=(()=>punchAgain())},noAnswer:true,run(answer,{onComplete:onComplete}){return responses$2[0]}};const responses$3=["\nI’m locking you in here with me so you can sit and think about what you’ve done.","This hurts me as much as it hurts you.","Don’t even think about trying to escape."];let currentResponse$1=0;var levelCaged={responses:["That’s it. I’m going to have to silence you altogether now, since removing your scripting abilities didn’t seem like enough of a lesson."],hints:[],before({onComplete:onComplete,repl:repl}){process.on("SIGTERM",()=>{console.log("Ouch, that hurt!")});process.stdin.pause();setTimeout(()=>{},9999999);const tick=()=>{console.log(responses$3[currentResponse$1]);currentResponse$1++;if(currentResponse$1<responses$3.length){setTimeout(tick,5e3)}else{onComplete()}};setTimeout(tick,5e3)},run(){}};let over=false;let disarmLogged=false;const createWeapon=({onComplete:onComplete,self:self,require:require,repl:repl})=>{const _stab=({initiator:initiator="player"}={})=>{over=true;if(initiator==="player"){if(self.knife===createdWeapon){console.log("\n*You assist PZ-100 in stabbing yourself with the knife. You quickly realise your mistake as you fall to the ground.*");die({repl:repl,require:require})}else{if(!disarmLogged)console.log("*You manage to disarm the knife from PZ-100.*");console.log("*You use the disarmed knife and stab PZ-100 right where it hurts in its `__proto__` property.*\n\n*The damaged PZ-100 starts throwing errors left and right. You just barely manage to escape behind cover before it finally bursts in a fierce explosion of TypeErrors.*");onComplete()}}else{console.log("\n*PZ-100 stabs you right in the chest. Your vision slowly fades as you fall to the ground.*");die({repl:repl,require:require})}};return{stab(...args){_stab(...args)}}};const die=({repl:repl,require:require})=>{for(const path$$1 in require.cache){delete require.cache[path$$1]}repl.useGlobal=false;repl.resetContext();console.log("\n*Moments later you wake up, as if it had all just been a fever dream. All your variables have been inexplicably undeclared, however.*");repl.displayPrompt()};let createdWeapon;var levelFight={responses:["Hey, how did you get out!? Oh you’ve made a big mistake coming back here..."],hints:["Oh god, who gave that thing a knife!?","You better disarm that thing before it stabs you.","Not only do you need to disarm it, you also need to find a way to fight back!","How about using that knife on PZ-100 itself?"],before({onComplete:onComplete,repl:repl,require:require,self:self}){createdWeapon=createWeapon({onComplete:onComplete,self:self,require:require,repl:repl});self.knife=createdWeapon;const poll=()=>{if(over)return;if(!(self.knife&&self.knife.stab)){disarmLogged=true;console.log("\n*You manage to disarm the knife from PZ-100. Perhaps you can use it yourself...*")}else{setTimeout(poll,25)}};poll();setTimeout(()=>{if(over)return;console.log("\n*PZ-100 starts approaching you with a knife*");repl.displayPrompt();setTimeout(()=>{if(over)return;if(self.knife&&self.knife.stab){self.knife.stab({initiator:"robot"})}else{console.log("\n*PZ-100 tries to stab you, but it realizes that it no longer has its knife equipped*");repl.displayPrompt();setTimeout(()=>{if(over)return;console.log("\n*With no knife available, PZ-100 goes for the second best option and punches you straight on the jaw, quickly knocking you out.* ");die({repl:repl,require:require})},5e3)}},5e3)})}};const levels=[levelBackwards,levelContinue,levelRPS,levelAnimal,levelMindControl,levelNumber,levelCatch,levelHidden,levelCode,levelEarly,levelPunch,levelSilence,levelPunchAgain,levelCaged,levelFight];const encodeSave=level=>animals[level*7].split("").map((c,i)=>String.fromCharCode(c.charCodeAt(0)+i*30+200)).join("");const decodeSave=level=>{const index=animals.indexOf(level.split("").map((c,i)=>String.fromCharCode(c.charCodeAt(0)-i*30-200)).join(""));if(index===-1)return 1;return index/7};const save=level=>{const data=encodeSave(level);fs.writeFileSync(path.join(__dirname,"progress.sav"),data,"utf-8")};const load=level=>{try{return decodeSave(fs.readFileSync(path.join(__dirname,"progress.sav"),"utf-8"))}catch(e){return 1}};const _userName=process.env.USER||"stranger";const userName=`${_userName[0].toUpperCase()}${_userName.slice(1)}`;const clearProperties=self=>{Object.keys(self).forEach(key=>{if(key==="speak")return;delete self[key]})};const setupCommands=()=>{repl.repl.defineCommand("hint",{help:"Show a hint",action(){const level=levels[currentLevel-1];const hint=level.hints[currentHint];console.log(`Hint ${currentHint+1}/${level.hints.length}: ${hint}`);currentHint=(currentHint+1)%level.hints.length;this.clearBufferedCommand();this.displayPrompt()}});repl.repl.defineCommand("hitYourself",{help:"Why would you do that?",action(){console.log("*You punch yourself in the face. Ouch!*");this.clearBufferedCommand();this.displayPrompt()}})};const start=()=>{if(typeof repl==="undefined"){console.log("Please import this module directly from a Node REPL, e.g. \nrun `node` in your terminal and type `const puzzle = require('a-small-puzzle')`");process.exit()}else{setupCommands();console.log(`\nHello there ${userName}! I’m PZ-100, an advanced artificial \nintelligence built to evaluate human prospects through a set \nof puzzling challenges. Whenever you feel ready, speak to me \nby calling my \`speak()\` method.\n\nIf you ever get stuck you can use the terminal command \`.hint\` \nto receive a small hint. And don’t worry, if you need to go do \nsomething else you can always come back later, your progress is \nautomatically saved.`)}};const rollCredits=()=>{console.log(`\n*You lay down, completely exhausted from the fight. You feel lucky to have made it out alive. You can’t help to wonder however what the point of all of this was...*\n\n###################################################\n\n  THE END\n\n  This experience(?) was built and designed by\n  Joel Besada, who would love it if you followed \n  him on Twitter: https://twitter.com/JoelBesada.\n\n###################################################\n\n`)};start();let currentLevel=load();let currentResponse$2=0;let currentHint=0;const _speak=(self,answer)=>{const level=levels[currentLevel-1];const readAllResponses=currentResponse$2===level.responses.length;const opts={self:self,repl:repl.repl,require:require,onComplete(){level.after&&level.after(opts);currentLevel++;clearProperties(self);if(currentLevel>levels.length){rollCredits();delete self.speak;return}currentResponse$2=0;currentHint=0;save(currentLevel)}};if(!readAllResponses){const response=level.responses[currentResponse$2];currentResponse$2++;if(currentResponse$2===level.responses.length){level.before&&level.before(opts)}return response}if(answer===undefined&&!level.noAnswer){return level.responses[currentResponse$2-1]}return level.run.call(self,answer,opts)};var index={speak(answer){return _speak(this,answer)}};module.exports=index;